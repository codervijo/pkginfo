One interesting thing to note, is that lua and other scripting languages
can't always use many performance enhancing syscalls.
eg. mmap which returns an address.
since lua,perl etc doesn't deal with addresses, they can't really use it.

Specialities
 1, no "continue", next or last
 2, no switch-case
 3, multiple arguments to functions can be dangerous 
 4, functions are first class citizen (can be assigned to variables etc)
 5, table is the main DS.
 6, You can use table to implement array
 7, arrays can be sparse, in which case #array doesn't makes sense.
 8, pairs() , ipairs() lets you iterate over tables and arrays respectively
 9, ifelse is "if () then ... elseif ... end"
10, No switch statement. Alternative  is here :
    http://lua-users.org/wiki/SwitchStatement


Resources
    1, JIT of lua is the fastest : http://lambda-the-ultimate.org/node/3851
    2, Implementation of Lua 5.0
       http://www.lua.org/doc/sblp2005.pdf
    3, Programming with Multiple paradigms in Lua
       http://www.inf.puc-rio.br/%7Eroberto/docs/ry09-03.pdf
    4, General info on formal languages
       http://staff.polito.it/silvano.rivoira/FormalLanguagesCompilers/materials.htm

Parsing
    https://en.wikipedia.org/wiki/Earley_parser
    ANTLR parser generator :   http://www.antlr.org/about.html
    Interpreter : http://realityforge.org/code/virtual-machines/2011/05/19/interpreters.html



Read - next January 2019
    1, http://luaforge.net/docman/83/98/ANoFrillsIntroToLua51VMInstructions.pdf
    2, https://www.oreilly.com/library/view/creating-solid-apis/9781491986301/
    3, https://the-ravi-programming-language.readthedocs.io/en/latest/lua_bytecode_reference.html#
    4, 
