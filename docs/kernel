1, Virtualization, Memory density
   https://www.kernel.org/doc/ols/2009/ols2009-pages-19-28.pdf
2, Research OS: Sun, by many OS-heavyweights
   https://en.wikipedia.org/wiki/Spring_(operating_system)

3, Timers
   https://en.wikipedia.org/wiki/High_Precision_Event_Timer
   HPET is meatn to supplement and replace 8254 programmable interval timer and 
   RTC's period interrupt. HPET has higher frequency and wider 64bit counters.
   Linux kernels prior to 2.6 cannot use HPET
   Linux kernel can use HPET as its clock source, but TSC is preferred.
   TSC is much lower overhead(WHY?)
   HPET is a continuously running timer that counts upward,
   not a one-shot device that counts down to zero,
                                          causes one interrupt and then stops.
   The HPET is programmed via a memory mapped I/O window that is discoverable 
   via Advanced Configuration and Power Interface (ACPI).  
   The HPET circuit in modern PCs is integrated into the southbridge chip.

   programmable interval timer (PIT)
   real-time clock (RTC)
   Time Stamp Counter (TSC)  
   Power Management Timer (PMTIMER)

   https://en.wikipedia.org/wiki/Time_Stamp_Counter
   The Time Stamp Counter (TSC) is a 64-bit register present on all 
   x86 processors since the Pentium. It counts the number of cycles since reset.
   The instruction RDTSC returns the TSC in EDX:EAX. In x86-64 mode, 
   RDTSC also clears the higher 32 bits of RAX and RDX. Its opcode is 0F 31

   The Time Stamp Counter was once an excellent high-resolution, low-overhead 
   way for a program to get CPU timing information. With the advent of 
   multi-core/hyper-threaded CPUs, systems with multiple CPUs, and hibernating 
   operating systems, the TSC cannot be relied upon to provide accurate results
   — unless great care is taken to correct the possible flaws: rate of tick and
   whether all cores (processors) have identical values in their time-keeping 
   registers. There is no promise that the timestamp counters of multiple CPUs 
   on a single motherboard will be synchronized. 

4, TCP Implementation in Linux
   http://www.ece.virginia.edu/cheetah/documents/papers/TCPlinux.pdf
   http://events.linuxfoundation.org/sites/events/files/slides/pushing-kernel-networking.pdf

5, Virtualization
   https://bellard.org/jslinux/
   Lots of emulators : https://bellard.org/

6, To debug, tools :
    i, https://linux.die.net/man/8/crash
   ii, https://github.com/crash-utility/crash
  iii, http://people.redhat.com/anderson/crash_whitepaper/
   iv, https://fedoraproject.org/wiki/How_to_use_kdump_to_debug_kernel_crashes
    v, LKCD: Linux Kernel Crash Dump : http://lkcd.sourceforge.net/
   vi, LK Disk dump : https://sourceforge.net/projects/lkdump/
  vii, OLD(2006 last update)  mini kernel dump : http://mkdump.sourceforge.net/

7, To create initramfs after building kernel:
   http://www.linuxfromscratch.org/blfs/view/cvs/postlfs/initramfs.html

8, Linux kernel 2.6+ has implementation of crypto in it.
   API is here: http://www.chronox.de/crypto-API/crypto/
   LJ Article on the topic : https://www.linuxjournal.com/article/6451

   Crypto acceleration is also possible inside kernel.
   One way to do that, is to use instructions for AES on Intel and AMD
   https://en.wikipedia.org/wiki/AES_instruction_set
   For ARM: https://schd.ws/hosted_files/ossna2017/37/Linux_crypto_API_tutorial.pdf

   Implementation details:
      The transformation object (TFM) is an instance of a transformation
      implementation. There can be multiple transformation objects associated
      with a single transformation implementation. Each of those transformation
      objects is held by a crypto API consumer or another transformation.
      Transformation object is allocated when a crypto API consumer requests
      a transformation implementation. The consumer is then provided with a
      structure, which contains a transformation object (TFM).

      Algorithm implementations—kernel modules that contain the underlying
      algorithm code.

      Transforms—objects that instantiate algorithms, manage internal state
      and handle common implementation logic. Transforms are managed by 
                crypto_alloc_tfm() and crypto_free_tfm().
      A set of API wrappers are provided to simplify transform use and
      to allow the properties of a transform's underlying algorithm to
      be queried.

      The following pseudo-code demonstrates a typical use of the transform
      interface, where some kernel code needs to encrypt data using the
      Blowfish cipher in electronic codebook (ECB) mode:

      tfm = crypto_alloc_tfm("blowfish",
                             CRYPTO_TFM_MODE_ECB);
      crypto_cipher_setkey(tfm, key, keylength);
      crypto_cipher_encrypt(tfm, &scatterlist,
                            numlists);
      crypto_free_tfm(tfm);

      Userspace API to these algorithms is through netlink sockets.
      The interface is provided via socket type using the type AF_ALG.
      In addition, the setsockopt option type is SOL_ALG.
      User space invokes the cipher operation with the send()/write()
      system call family. The result of the cipher operation is obtained
      with the read()/recv() system call family.

      AES-NI
      ======
      Intel instructions for AES: 
      https://software.intel.com/en-us/articles/intel-advanced-encryption-standard-instructions-aes-ni
      https://www.intel.com/content/dam/doc/white-paper/advanced-encryption-standard-new-instructions-set-paper.pdf
      https://software.intel.com/en-us/node/256280
